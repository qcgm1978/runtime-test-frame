// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var asynTest;

  describe('verify working', function() {
    return it('', function() {
      return expect(true).toBeTruthy();
    });
  });

  asynTest = function(duration) {
    var flag, value, waitsForWrapper;
    value = 0;
    flag = false;
    runs((function() {
      flag = false;
      value = 0;
      return setTimeout((function() {
        return flag = true;
      }), 500);
    }));
    waitsForWrapper = function(duration) {
      return waitsFor((function() {
        value++;
        return flag;
      }), "The Value should be incremented", duration);
    };
    waitsForWrapper(duration);
    return runs(function() {
      return expect(value).toBeGreaterThan(0);
    });
  };

  describe('toEqual test suite containing several it specs', function() {
    it('toEqual as test case', function() {
      expect(typeof toEqual !== "undefined" && toEqual !== null).toBeFalsy();
      expect(expect().toEqual instanceof Function).toBeTruthy('I\'m assertion');
      return expect({}).toEqual({});
    });
    return it('the second test case for asynchronous test', function() {
      return asynTest(750);
    });
  });

  describe('poll mode in asynchronous handling of jasmine', function() {
    it('test runs spec', function() {
      expect(runs instanceof Function).toBeTruthy();
      expect(runs(function() {}) instanceof Function).toBeFalsy();
      return expect(runs(function() {})).toBeUndefined();
    });
    it('test waitsFor', function() {
      return expect(waitsFor instanceof Function).toBeTruthy();
    });
    return it('emulation of waitsFor', function() {
      var isRunsComplet, runs, runsCallback, verify, waitsFor;
      isRunsComplet = false;
      runsCallback = function() {};
      runs = function(func) {
        runsCallback = func;
        return func();
      };
      verify = function(func, str) {
        return func.call(this, str);
      };
      waitsFor = function(func, str, duration) {
        var defaultPollDuration, init, poll;
        defaultPollDuration = 500;
        init = 0;
        return poll = setInterval((function() {
          if (init >= duration) {
            verify(runsCallback, str);
            clearInterval(poll);
            return;
          }
          func();
          return init += defaultPollDuration;
        }), defaultPollDuration);
      };
      return asynTest(750);
    });
  });

  describe('the other emulation recommanded by John Resig', function() {
    var paused, queue, results, runTest,
      _this = this;
    runTest = function() {
      if (!paused && queue.length) {
        queue.shift()();
        if (!paused) {
          return resume();
        }
      }
    };
    queue = [];
    paused = false;
    results = void 0;
    this.test = function(name, fn) {
      queue.push(function() {
        return fn();
      });
      return runTest();
    };
    this.pause = function() {
      return paused = true;
    };
    this.resume = function() {
      paused = false;
      return setTimeout(runTest, 1);
    };
    return this.test("Async Test", function() {
      _this.pause();
      return setTimeout((function() {
        expect(paused).toBeTruthy();
        return this.resume();
      }), 1000);
    });
  });

}).call(this);

/*
//@ sourceMappingURL=learn-jasmine-by-jasmine.map
*/
