// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var judgeExpression,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  TestCase('jasmine', {
    'test jasmine': function() {
      assertFunction(describe);
      return assertFunction(it);
    }
  });

  describe('test jasmine', function() {
    var result, temp;
    temp = {};
    result = void 0;
    beforeEach(function() {
      temp.foo = {
        method: function() {}
      };
      spyOn(temp.foo, 'method').andReturn(745);
      return result = temp.foo.method();
    });
    return it('test methods', function() {
      expect(true).toBe(true);
      expect(beforeEach).toBeDefined();
      expect(expect().toHaveBeenCalled instanceof Function).toBeTruthy();
      return expect(temp.foo.method).toHaveBeenCalled();
    });
  });

  describe("A spy, when faking a return value", function() {
    var bar, fetchedBar, foo;
    foo = void 0;
    bar = void 0;
    fetchedBar = void 0;
    beforeEach(function() {
      foo = {
        setBar: function(value) {
          return bar = value;
        },
        getBar: function() {
          return bar;
        }
      };
      spyOn(foo, "getBar").andReturn(745);
      return fetchedBar = foo.getBar();
    });
    return it("tracks that the spy was called", function() {
      return expect(foo.getBar).toHaveBeenCalled();
    });
  });

  describe('js methods', function() {
    var func;
    func = function() {
      return this;
    };
    return it('test bind', function() {
      expect(func()).toBeFalsy();
      return expect(func.call(null)).toBeNull();
    });
  });

  judgeExpression = function(parameter) {
    if (!parameter) {
      throw new Error('error');
    }
  };

  describe('String.prototype.replace: /g and /i Flags', function() {
    return it('match correctly when reg with i and g', function() {
      var isMatching, reg, regCorrect, regNoG, regNoI, str;
      reg = /a/;
      regNoI = /a/g;
      regNoG = /a/i;
      regCorrect = /a/ig;
      str = 'bacadA';
      isMatching = function(parameter) {
        return str.replace(parameter, 'd') === 'bdcddd';
      };
      expect(judgeExpression.bind(null, isMatching(reg))).toThrow();
      expect(judgeExpression.bind(null, isMatching(regNoI))).toThrow();
      expect(judgeExpression.bind(null, isMatching(regNoG))).toThrow();
      return expect(judgeExpression.bind(null, isMatching(regCorrect))).not.toThrow();
    });
  });

  describe('Array-Like Objects and Array.prototype.slice', function() {
    var invokeSliceByChain, invokeSliceDirectly, obj;
    obj = {
      a: 1,
      b: 2,
      0: 'zero',
      1: 'first'
    };
    invokeSliceDirectly = function() {
      return obj.slice();
    };
    invokeSliceByChain = function() {
      var arr;
      arr = Array.prototype.slice.call(obj, 0);
      return arr;
    };
    it('error when invoking slice directly', function() {
      return expect(invokeSliceDirectly.bind(null)).toThrow();
    });
    return it('apply splice method to an obj', function() {
      expect(invokeSliceByChain.bind(null)).not.toThrow();
      expect(invokeSliceByChain.call(null)).toEqual([]);
      obj.length = 2;
      return expect(invokeSliceByChain.call(null)).toEqual(['zero', 'first']);
    });
  });

  describe('The Array sort method is vastly underused and probably a bit more powerful than most developers believe', function() {
    var arr, arr1, arr2;
    arr = [5, 1, 3, 9, 6];
    arr1 = [
      {
        name: "Robin Van PurseStrings",
        age: 30
      }, {
        name: "Theo Walcott",
        age: 24
      }, {
        name: "Bacary Sagna",
        age: 28
      }
    ];
    arr2 = [
      {
        name: "Theo Walcott",
        age: 24
      }, {
        name: "Bacary Sagna",
        age: 28
      }, {
        name: "Robin Van PurseStrings",
        age: 30
      }
    ];
    it('sort objects by property', function() {
      return expect(arr.sort()).toEqual([1, 3, 5, 6, 9]);
    });
    return it('order by descending because the val of the minus would compare to 0, if < 0, [obj,obj1],or [obj1,obj]', function() {
      return expect(arr1.sort(function(obj, obj1) {
        return obj.age - obj1.age;
      })).toEqual(arr2);
    });
  });

  describe('Array Length for Truncation', function() {
    var arr1, arr2;
    arr1 = [];
    arr2 = [];
    it('array or obj aren\'t recommended assignments like this', function() {
      arr1 = arr2 = [1, 2, 3];
      return expect(arr1).toEqual(arr2);
    });
    it('it creates a new array instead of changing the reference of the original, so "arr2" is still [1, 2, 3]', function() {
      arr1 = [];
      expect(judgeExpression.bind(null, arr2.length === 0)).toThrow();
      expect(arr2).toEqual([1, 2, 3]);
      return arr1 = arr2 = [1, 2, 3];
    });
    return it('The right way, assignment keeping reference', function() {
      arr1.length = 0;
      expect(judgeExpression.bind(null, arr2.length === 0)).not.toThrow();
      return expect(arr2).toEqual([]);
    });
  });

  describe('Array Merging with push', function() {
    var arr1, arr2, mergeFrom, mergeTo;
    mergeTo = [4, 5, 6];
    mergeFrom = [7, 8, 9];
    it('array merging', function() {
      Array.prototype.push.apply(mergeTo, mergeFrom);
      return expect(mergeTo).toEqual([4, 5, 6, 7, 8, 9]);
    });
    arr1 = [4, 5, 6];
    arr2 = [7, 8, 9];
    return it('array merging by coffeescript loop', function() {
      var i, _i, _len;
      expect(arr1).toEqual([4, 5, 6]);
      for (_i = 0, _len = mergeFrom.length; _i < _len; _i++) {
        i = mergeFrom[_i];
        arr1.push(i);
      }
      return expect(arr1).toEqual([4, 5, 6, 7, 8, 9]);
    });
  });

  describe('Efficient Feature/Object Property Detection', function() {
    var geo, geo1;
    geo = __indexOf.call(navigator, 'geolocation') >= 0;
    geo1 = 'geolocation' in navigator;
    it('In the past, the snippet caused memory leaks in some browsers', function() {
      return expect(judgeExpression.bind(null, navigator.geolocation)).not.toThrow();
    });
    return it('coffeescript uses of to check prop in obj', function() {
      expect(judgeExpression.bind(null, geo)).toThrow();
      return expect(judgeExpression.bind(null, geo1)).not.toThrow();
    });
  });

  describe('Event preventDefault and stopPropagation', function() {
    var body, bool, boolReset, docBool, triggerPrevent, triggerStop;
    body = document.body;
    bool = false;
    docBool = false;
    triggerStop = function(e) {
      e.stopPropagation();
      return bool = true;
    };
    triggerPrevent = function(e) {
      if (typeof e.preventDefault === "function") {
        e.preventDefault();
      }
      return bool = true;
    };
    boolReset = function() {
      bool = false;
      return docBool = false;
    };
    it('capturing browser means you can get the document', function() {
      expect(body).toBeDefined();
      expect(body.onclick).toBeDefined();
      body.onclick = function(e) {
        return bool = true;
      };
      return document.onclick = function(e) {
        return docBool = true;
      };
    });
    return it('stopping the event is that not only does it prevent the default action, but it stops propagation of the event', function() {
      expect(body.click).toBeDefined();
      expect(body.click instanceof Function).toBeTruthy();
      body.click();
      expect(bool).toBeTruthy();
      expect(docBool).toBeTruthy('bubble');
      boolReset();
      expect(bool).toBeFalsy();
      expect(docBool).toBeFalsy();
      body.onclick = triggerStop;
      body.click();
      expect(bool).toBeTruthy();
      expect(docBool).toBeFalsy('no bubble');
      boolReset();
      body.onclick = triggerPrevent;
      body.click();
      expect(bool).toBeTruthy();
      return expect(docBool).toBeTruthy('bubble');
    });
  });

}).call(this);

/*
//@ sourceMappingURL=test-by-jasmine.map
*/
