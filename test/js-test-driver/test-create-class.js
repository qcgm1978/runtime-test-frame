// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var Func, func, global;

  test('qunit wrapper', function() {
    equal(typeof assertException !== "undefined" && assertException !== null, true);
    ok(assertException instanceof Function);
    return ok(assertTrue instanceof Function);
  });

  global = {};

  Func = function(arg) {
    var priv;
    priv = 'priv';
    if (global != null) {
      global.a = 1;
    }
    if (typeof this !== "undefined" && this !== null) {
      this.a = 2;
    }
    if (typeof this !== "undefined" && this !== null) {
      this.getPriv = function() {
        return priv;
      };
    }
    return this;
  };

  func = new Func();

  test('create class by function', function() {
    var obj;
    equal({
      a: 2
    }, {
      a: 2
    });
    equal(typeof func, typeof {
      a: 2
    });
    ok(func instanceof Object);
    obj = {};
    equal(Func(), void 0, 'no global this');
    equal(global != null ? global.a : void 0, 1, 'side effects on global obj');
    equal(this, {});
    return equal(this.a, void 0);
  });

  test('two ways implement methods of function class', function() {
    var a;
    a = new Func();
    equal(a.a, 2, 'instance property is set');
    notStrictEqual(func, a);
    equal(a.getPriv(), 'priv', 'Methods defined internally');
    Func.prototype.getA = function() {
      return this.a + 1;
    };
    return equal(a.getA(), 3, 'Methods added to the prototype');
  });

  test('object literals', function() {
    var a, c, obj;
    a = 1;
    obj = {
      Func: Func,
      a: a
    };
    obj.getA = function() {
      return this.a;
    };
    c = new obj.Func();
    equal(obj.getA(), 1, 'this in obj literal pointed to the obj');
    equal(c.a, 2, 'this in instance pointed to constructor precedence over obj');
    assertException(function() {
      throw Error;
    }, 'Error');
    return assertException(function() {
      return obj.getA();
    }, 'TypeError');
  });

  test('test creating a class by Singleton using a function', function() {
    var single;
    single = new function() {
      return this.color = 'grey';
    };
    equal(single.color, 'grey');
    single.color = 'red';
    notEqual(single.color, 'grey');
    return equal(single.color, 'red', 'red overwite grey that means only one single instance of this class at any time');
  });

}).call(this);

/*
//@ sourceMappingURL=test-create-class.map
*/
