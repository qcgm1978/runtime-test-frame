// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  describe('js questions', function() {
    var Func, a;
    Func = function() {};
    Func.prototype.test = function() {
      return this;
    };
    a = Func();
    it('What\'s the difference between a variable that is: null, undefined or undeclared?', function() {
      var b;
      a = null;
      b = void 0;
      expect(a === b).not.toEqual();
      expect((a != null) && (b != null)).toBeFalsy();
      expect(a==b).toBeTruthy();
      expect(typeof a).toEqual('object');
      expect(a === null).toBeTruthy();
      expect(b === null).toBeFalsy();
      expect(typeof b).toEqual('undefined');
      return expect(b === void 0).toBeTruthy();
    });
    it('new key word', function() {
      var b;
      b = new Func();
      expect(a).toEqual(void 0);
      expect(function() {
        return a.test();
      }).toThrow();
      expect(typeof b).toEqual('object');
      expect(b instanceof Function).toBeFalsy();
      expect(b instanceof Object).toBeTruthy();
      expect(b.prototype).toBeUndefined();
      expect(b.constructor).toEqual(Func);
      expect(b.test).not.toThrow();
      return expect(b.test()).toEqual(b);
    });
    it("What's the difference between .call and .apply?", function() {
      var func, func1;
      expect(Func.apply).toThrow();
      func = function() {
        return arguments;
      };
      expect(func.apply(null, {})).toEqual({});
      expect(func.call(null, {})).toEqual({
        0: {}
      });
      expect(func.apply(null, [])).toEqual([]);
      expect(func.call(null, [])).toEqual({
        0: []
      });
      expect(func.call(null, [], {})).toEqual({
        0: [],
        1: {}
      });
      expect(func.apply(null, [], {})).toEqual({});
      expect(func.apply(null, [{}])).toEqual({
        0: {}
      });
      func1 = function(a, b) {
        return a + b;
      };
      expect(func1.apply(null, [1, 2])).toEqual(3);
      expect(func1.call(null, [1, 2])).not.toEqual(3);
      return expect(func1.call(null, 1, 2)).toEqual(3);
    });
    it('explain Function.prototype.bind?', function() {
      var func;
      expect(Function.prototype.bind instanceof Function).toBeTruthy();
      func = function() {
        return this;
      };
      expect(func.apply()).toBeUndefined();
      expect(func.call()).toBeUndefined();
      expect(func.bind() instanceof Function).toBeTruthy();
      expect(this).toBeDefined();
      expect(func.bind(this)()).toEqual(this);
      return expect(func.bind(null)()).toEqual(null);
    });
    return it('Make this work: javascript [1,2,3,4,5].duplicate(); // [1,2,3,4,5,1,2,3,4,5]', function() {
      var arr;
      Array.prototype.duplicate = function() {
        return this.concat(this);
      };
      arr = [1, 2, 3, 4, 5];
      expect(arr.duplicate instanceof Function).toBeTruthy();
      return expect(arr.duplicate()).toEqual([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]);
    });
  });

}).call(this);

/*
//@ sourceMappingURL=Interview-Questions-from-github.map
*/
