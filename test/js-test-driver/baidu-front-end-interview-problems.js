// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  describe('this is a test for the interview problems of Baidu front-end from internet', function() {
    it('data type', function() {
      var arr;
      expect(Function instanceof Object).toBeTruthy();
      expect(Array instanceof Object).toBeTruthy();
      arr = [Object, Array, Number, String, Boolean, null, void 0];
      return expect(arr.length).toEqual(7);
    });
    it('how to get an id', function() {
      var body;
      body = document.body;
      expect(body).toBeDefined();
      expect(body.id).toEqual('');
      body.id = 'test-id';
      return expect(body.id).toEqual('test-id');
    });
    it('how to get all elements in the following code', function() {
      var arr, ele;
      ele = {
        form: {
          input: 'text',
          input1: "text"
        }
      };
      arr = [ele.form, ele.form.input, ele.form.input1];
      return expect(arr.length).toEqual(3);
    });
    it('how to add event to a element', function() {
      var a;
      a = {
        href: ""
      };
      a.event = function() {
        return false;
      };
      return expect(a.event).toBeDefined();
    });
    it('what is <!DOCTYPE>', function() {
      var docType, isChildInterface, isNode;
      docType = {
        definition: 'The DocumentType interface represents a Node containing a doctype.',
        method: 'Inherits methods from its parent, Node, and implements the ChildNode interface.'
      };
      isNode = /node/i.exec(docType.definition);
      isChildInterface = /\schildnode\sinterface/i.exec(docType.method);
      expect(isNode).toBeDefined();
      return expect(isChildInterface).toBeDefined();
    });
    it('three columns layout', function() {
      var arr, body, contentcolumn, contentwrapper, footer, left, leftcolumn, maincontainer, rightcolumn, topsection;
      left = 'left';
      body = {
        margin: 0,
        padding: 0
      };
      maincontainer = {
        width: '840px',
        margin: '0 auto'
      };
      topsection = {
        height: '90px'
      };
      contentwrapper = {
        float: left,
        width: '100%'
      };
      contentcolumn = {
        margin: '0 190px 0 180px'
      };
      leftcolumn = {
        float: left,
        width: '180px ',
        marginLeft: '-840px'
      };
      rightcolumn = {
        float: left,
        width: '190px',
        marginLeft: '-190px '
      };
      footer = {
        clear: left,
        width: '100%'
      };
      arr = [body, maincontainer, topsection, contentwrapper, contentcolumn, leftcolumn, rightcolumn, footer];
      return expect(arr.length).toEqual(8);
    });
    it('box model', function() {
      var ele, eleWidth;
      ele = {
        width: '250px',
        padding: '10px',
        border: '5px solid gray',
        margin: '10px'
      };
      eleWidth = '300px';
      return expect(parseInt(ele.width) + parseInt(ele.padding) * 2 + parseInt(ele.border) * 2 + parseInt(ele.margin) * 2).toEqual(parseInt(eleWidth));
    });
    it('block and inline element and diferences between them', function() {
      var attr, block, inline, str;
      block = ['h1', 'p', 'ul', 'table', 'others'];
      str = "b, big, i, small, tt\nabbr, acronym, cite, code, dfn, em, kbd, strong, samp, var\na, bdo, br, img, map, object, q, script, span, sub, sup";
      inline = str.split(/[,\n]/);
      expect(inline.length).toEqual(26);
      attr = 'the browser will display a line break before and after it';
      block.attr = attr;
      expect(block.attr).toBeDefined();
      return expect(inline.attr).toBeUndefined();
    });
    it('CSS Selector Hacks', function() {
      var attrHacks, getIeHacks, getOtherHacks, selectorHacksIe, selectorHacksStandard;
      selectorHacksIe = {
        6: '* html',
        7: ['*:first-child+html', 'html>body', ':root *>', '*+html'],
        8: 'html>/**/body',
        10: ['*+html', ':root *>', 'html>/**/body']
      };
      getIeHacks = function(browser) {
        var arr, num;
        arr = /ie(\d+)/.exec(browser);
        if (arr === null) {
          return;
        }
        num = parseInt(arr[1]);
        if (num <= 6) {
          return selectorHacksIe['6'];
        }
        if (num >= 10) {
          return selectorHacksIe['10'];
        }
        return selectorHacksIe[num];
      };
      expect(getIeHacks('ie5.0')).toEqual('* html');
      expect(getIeHacks('ie7')).toEqual(['*:first-child+html', 'html>body', ':root *>', '*+html']);
      expect(getIeHacks('ie11')).toEqual(['*+html', ':root *>', 'html>/**/body']);
      expect(getIeHacks('ie9')).toBeUndefined();
      selectorHacksStandard = {
        val: [':root *>', 'html>/**/body'],
        mobile: '@media screen and (max-device-width:',
        chrome: {
          val: ['body:nth-of-type(1)', 'body:first-of-type', '@media screen and (-webkit-min-device-pixel-ratio:0)'],
          relation: '>=1'
        },
        firefox: {
          val: ['html>body'],
          '1': ['x:-moz-any-link'],
          '3': ['x:-moz-any-link, x:default'],
          '3.5': ['body:nth-of-type(1)', 'body:not(:-moz-handler-blocked)']
        },
        safari: {
          val: 'html>body',
          2: ['html:first-child', 'html[xmlns*=""] body:last-child'],
          3: ['html[xmlns*=""] body:last-child', 'body:nth-of-type(1)'],
          '2<=n>=3.1': ['html[xmlns*=""]:root', '*|html[xmlns*=""] '],
          '>=3': ['body:nth-of-type(1)', 'body:first-of-type', '@media screen and (-webkit-min-device-pixel-ratio:0)'],
          '>=3.5': 'body:first-of-type'
        },
        opera: {
          val: 'html>body',
          '9.25': '*|html[xmlns*=""]',
          '<=9.27': 'html:first-child',
          '>=9': ['body:nth-of-type(1)', 'body:first-of-type']
        }
      };
      getOtherHacks = function(browser) {
        var arr, num, ret;
        arr = /([A-Za-z]+)(\d+)?/.exec(browser);
        if (arr === null) {
          return;
        }
        browser = arr[1];
        num = parseInt(arr[2]);
        ret = selectorHacksStandard.val;
        switch (false) {
          case browser !== 'mobile':
            return ret.concat(selectorHacksStandard.mobile);
          case !(browser === 'chrome' && num >= 1):
            return ret.concat(selectorHacksStandard.chrome);
          case browser !== 'firefox':
            ret = ret.concat(selectorHacksStandard.firefox.val);
            if (num >= 1) {
              ret = ret.concat(selectorHacksStandard.firefox['1']);
            }
            if (num >= 3) {
              ret = ret.concat(selectorHacksStandard.firefox['3']);
            }
            if (num >= 3.5) {
              ret.concat(selectorHacksStandard.firefox['3.5']);
            }
            return ret;
          case browser !== 'safari':
            return ret;
        }
      };
      expect(getOtherHacks('mobile')).toEqual([':root *>', 'html>/**/body', '@media screen and (max-device-width:']);
      expect(getOtherHacks('chrome0.5')).toBeUndefined();
      expect(getOtherHacks('firefox1')).toEqual([':root *>', 'html>/**/body', 'html>body', 'x:-moz-any-link']);
      expect(getOtherHacks('firefox3')).toEqual([':root *>', 'html>/**/body', 'html>body', 'x:-moz-any-link', 'x:-moz-any-link, x:default']);
      return attrHacks = {
        ie6: ['_', '*', '#', '\9', '!'],
        other: {
          val: '/**/',
          ie7: ['*|#', '\9', '/*\**/', '!'],
          ie8: ['\9', '/*\**/', '\0'],
          ie9: ['\9', '\0', '@media screen and (min-width:0\0)'],
          ie10: ['@media screen and (min-width:0\0)']
        }
      };
    });
    it('implicit conversion', function() {
      var x, y;
      x = 0.5;
      y = '0.5';
      expect(x + '').toEqual(String(0.5));
      expect(+y).toEqual(Number(y));
      return expect(!!y).toEqual(Boolean(y));
    });
    return it('overwrite valueOf and toString, valueOf takes precedence over toString', function() {
      Array.prototype.valueOf = function() {
        return 10;
      };
      Array.prototype.toString = function() {
        return '88';
      };
      expect(!![]).toBeTruthy();
      expect([] + 1).toEqual(11);
      expect([] + '').toEqual('10');
      expect(Number([])).toEqual(10);
      expect(String([])).toEqual('88');
      Array.prototype.valueOf = null;
      expect([] + 1).toEqual('881');
      return expect(Number([])).toEqual(88);
    });
  });

  describe('DOM (Document Object Model) events allow event-driven programming languages like JavaScript, JScript, ECMAScript, VBScript and Java to register various event handlers/listeners on the element nodes inside a DOM tree, e.g. HTML, XHTML, XUL and SVG documents.', function() {
    it('Mouse event', function() {
      var arrEveConst, arrFormEve, arrFrameObjEve, arrKeyboardEvents, arrMouseEvents, arrMutation, arrTouchEve, arrUserInterface, eve, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _len7, _m, _n, _o, _p;
      expect(document.body.onclick).toBeNull();
      document.body.onclick = function() {};
      arrMouseEvents = ['onclick', 'ondblclick', 'onmousedown', 'onmousemove', 'onmouseover', 'onmouseout	', 'onmouseup'];
      expect(Event).toBeDefined();
      for (_i = 0, _len = arrMouseEvents.length; _i < _len; _i++) {
        eve = arrMouseEvents[_i];
        expect(__indexOf.call(Event, eve) >= 0).toBeFalsy();
      }
      arrKeyboardEvents = ['onkeydown', 'onkeypress	', 'onkeyup'];
      for (_j = 0, _len1 = arrKeyboardEvents.length; _j < _len1; _j++) {
        eve = arrKeyboardEvents[_j];
        expect(__indexOf.call(Event, eve) >= 0).toBeFalsy();
      }
      arrFrameObjEve = ['onabort', 'onerror        ', 'onload	        ', 'onresize	        ', 'onscroll', 'onunload'];
      for (_k = 0, _len2 = arrFrameObjEve.length; _k < _len2; _k++) {
        eve = arrFrameObjEve[_k];
        expect(__indexOf.call(Event, eve) >= 0).toBeFalsy();
      }
      arrFormEve = ['onblur        ', 'onchange	        ', 'onfocus        ', 'onreset	        ', 'onselect', '        onsubmit'];
      for (_l = 0, _len3 = arrFormEve.length; _l < _len3; _l++) {
        eve = arrFormEve[_l];
        expect(__indexOf.call(Event, eve) >= 0).toBeFalsy();
      }
      arrEveConst = ['CAPTURING_PHASE	', '        AT_TARGET	', '        BUBBLING_PHASE'];
      for (_m = 0, _len4 = arrEveConst.length; _m < _len4; _m++) {
        eve = arrEveConst[_m];
        expect(__indexOf.call(Event, eve) >= 0).toBeFalsy();
      }
      arrUserInterface = ['focusin	', '        focusout	', '        DOMActivate'];
      for (_n = 0, _len5 = arrUserInterface.length; _n < _len5; _n++) {
        eve = arrUserInterface[_n];
        expect(__indexOf.call(Event, eve) >= 0).toBeFalsy();
      }
      arrMutation = ['DOMSubtreeModified	', 'DOMNodeInserted	', 'DOMNodeRemoved	', 'DOMNodeRemovedFromDocument	', 'DOMNodeInsertedIntoDocument	', 'DOMAttrModified	', 'DOMCharacterDataModified'];
      for (_o = 0, _len6 = arrMutation.length; _o < _len6; _o++) {
        eve = arrMutation[_o];
        expect(__indexOf.call(Event, eve) >= 0).toBeFalsy();
      }
      arrTouchEve = ['touchstart', 'touchend', 'touchmove', 'touchenter', 'touchleave', 'touchcancel'];
      for (_p = 0, _len7 = Event.length; _p < _len7; _p++) {
        eve = Event[_p];
        expect(__indexOf.call(Event, eve) >= 0).toBeDefined();
      }
      expect(window.navigator.pointerEnabled).toBeUndefined();
      if (typeof MSPointerEvent !== "undefined" && MSPointerEvent !== null) {
        return expect(MSPointerEvent).toBeDefined();
      }
    });
    it('Event object', function() {
      expect(document.body.onclick).toBeDefined();
      document.body.onclick = function(e) {
        var arrEveMethods, arrEventProp, val, _i, _j, _len, _len1, _results;
        expect(e instanceof Object).toBeTruthy();
        arrEventProp = ['type', 'target', 'currentTarget', 'eventPhase', 'bubbles', 'cancelable', 'DOMTimeStamp'];
        arrEveMethods = ['stopPropagation', 'preventDefault', 'initEvent'];
        for (_i = 0, _len = arrEventProp.length; _i < _len; _i++) {
          val = arrEventProp[_i];
          expect(__indexOf.call(e, val) >= 0).toBeDefined();
        }
        _results = [];
        for (_j = 0, _len1 = arrEveMethods.length; _j < _len1; _j++) {
          val = arrEveMethods[_j];
          _results.push(expect(__indexOf.call(e, val) >= 0).toBeDefined());
        }
        return _results;
      };
      expect(document.body.onclick instanceof Function).toBeTruthy();
      return document.body.click();
    });
    return it('Event handling models: DOM Level 2', function() {
      var arrEveHandleMode, arrHandleModeForIe, val, _i, _j, _len, _len1, _results;
      arrEveHandleMode = ['addEventListener', 'removeEventListener', 'dispatchEvent'];
      for (_i = 0, _len = arrEveHandleMode.length; _i < _len; _i++) {
        val = arrEveHandleMode[_i];
        expect(__indexOf.call(window, val) >= 0).toBeDefined();
        expect(__indexOf.call(document, val) >= 0).toBeDefined();
      }
      arrHandleModeForIe = ['attachEvent', 'detachEvent'];
      _results = [];
      for (_j = 0, _len1 = arrHandleModeForIe.length; _j < _len1; _j++) {
        val = arrHandleModeForIe[_j];
        if (/msie/i.exec(navigator.userAgent)) {
          _results.push(expect(val in window).toBeTruthy());
        }
      }
      return _results;
    });
  });

  describe('Relaxing the same-origin policy', function() {
    var arrSolution;
    arrSolution = [
      'server proxy', {
        'document.domain property': {
          pos: 'client-side',
          example: "document.domain='the same origin'"
        }
      }, {
        'Cross-Origin Resource Sharing': {
          pos: 'server-side',
          example: "$allowed_origins   = array(\n                            \"http://www.example.com\"   ,\n                            \"http://app.example.com\"  ,\n                            \"http://cms.example.com\"  ,\n                          );\nif (in_array($_SERVER['HTTP_ORIGIN'], $allowed_origins)){\n    @header(\"Access-Control-Allow-Origin: \" . $_SERVER['HTTP_ORIGIN']);\n}"
        }
      }, {
        'JSONP': {
          pos: 'client-side',
          example: ["$.ajax({\ndataType: 'jsonp',\ndata: 'id=10',\njsonp: 'jsonp_callback',\nurl: 'http://api.example.com/getdata',\nsuccess: function () {\n// do stuff\n},\n});", '<script type="text/javascript" src="http://api.example.com/getdata?jsonp=callback"></script>']
        }
      }, {
        'Cross-document messaging': 'postMessage'
      }
    ];
    return expect(arrSolution.length).toEqual(5);
  });

}).call(this);

/*
//@ sourceMappingURL=baidu-front-end-interview-problems.map
*/
